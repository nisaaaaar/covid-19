{"version":3,"sources":["pages/Home.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","latest","setLatest","results","setResults","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","countriesLocations","map","i","lat","countryInfo","lng","long","style","color","backgroundColor","height","width","textAlign","borderRadius","src","flag","cases","LastUpdated","prevTime","last","duration","parseInt","minutes","hours","msToTime","Date","getTime","data-tip","textDecoration","CardDeck","className","Card","text","margin","background","boxShadow","Body","Title","value","displayType","thousandSeparator","fontSize","Footer","updated","Text","deaths","recovered","border","bootstrapURLKeys","key","defaultCenter","defaultZoom","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8103579a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport NumberFormat from \"react-number-format\";\nimport GoogleMapReact from 'google-map-react';\n\nfunction Home() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [prevTime, curTime] = useState([]);\n\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\n        axios.get(\"https://corona.lmao.ninja/v2/countries\"),\n      ])\n      .then((responseArr) => {\n        setLatest(responseArr[0].data);\n        setResults(responseArr[1].data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n // const date = new Date(parseInt(latest.updated));\n  //const lastUpdated = date.toString();\n\n  const countriesLocations = results.map((data, i) => {\n\n\n    return (\n\n            <div\n              lat={data.countryInfo.lat}\n              lng={data.countryInfo.long}\n              style={\n                {\n                  color:\"black\",\n                  backgroundColor: \"#F86666\",\n                  height: \"25px\",\n                  width: \"45px\",\n                  textAlign: \"center\",\n                  borderRadius: \"30%\"\n                }\n              }\n              >\n              <img height = \"10px\" src={data.countryInfo.flag} />\n              <br />\n              {data.cases}\n            </div>\n    );\n  });\n \nconst LastUpdated = ({latest}) =>{\n              function msToTime(duration) {\n                          var milliseconds = parseInt((duration%1000)/100)\n                              , minutes = parseInt((duration/(1000*60))%60)\n                              , hours = parseInt((duration/(1000*60*60))%24);\n\n                          hours = (hours < 10) ? \"0\" + hours : hours;\n                          minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n                          return (\n                                  hours == 0 ?\n                                  \": \"+ minutes + \" minutes\"\n                                  :\": \"+hours + \" hour\" +\" \"+ minutes + \" minutes\");\n                        }\n              const prevTime = latest;\n              const curTime = (new Date()).getTime();\n              const last = msToTime(curTime - prevTime);\n              \n              if(last)\n                 return( <span>{last}</span> )\n              else{\n                  return (<span></span>)\n                }\n                \n\n          }\n  \n\n  return (\n \n    <div>      \n      <br />\n      <h1\n        data-tip=\"Last modified date: 16/05/2020 - v2.2\"\n        style={{ textAlign: \"center\" ,textDecoration:\"underline\",color:\"#cc6699\"}}\n      >\n        COVID-19 Worldwide\n      </h1>\n     \n      <br />\n      <CardDeck className=\"stats-card ml-2 mr-2\">\n        <Card\n          text=\"white\"\n          className=\"text-center\"\n          style={{ margin: \"10px\",  borderRadius: \"5%\",background: \"#8BBDE8\" ,boxShadow:\"5px 5px 20px black\" }}\n        >\n          <Card.Body>\n            <Card.Title>Cases</Card.Title>\n            {/* <Card.Text>{latest.cases}</Card.Text> */}\n            <NumberFormat\n              value={latest.cases}\n              displayType={\"text\"}\n              thousandSeparator={true}\n              style={{ fontSize: \"30px\" }}\n            />\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated <LastUpdated latest={latest.updated} /></small>\n          </Card.Footer>\n        </Card>\n        <Card\n          text={\"white\"}\n          className=\"text-center\"\n          style={{ margin: \"10px\",borderRadius: \"5%\" ,background: \"#F86666\",boxShadow:\"5px 5px 20px black\" }}\n        >\n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>\n              {\" \"}\n              <NumberFormat\n                value={latest.deaths}\n                displayType={\"text\"}\n                thousandSeparator={true}\n                style={{ fontSize: \"30px\" }}\n              />\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated <LastUpdated latest={latest.updated} /></small>\n          </Card.Footer>\n        </Card>\n        <Card\n          text={\"white\"}\n          className=\"text-center\"\n          style={{ margin: \"10px\",borderRadius: \"5%\", background:\"#3CAD2C\" ,boxShadow:\"5px 5px 20px black\" }}\n        >\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>\n              {\" \"}\n              <NumberFormat\n                value={latest.recovered}\n                displayType={\"text\"}\n                thousandSeparator={true}\n                style={{ fontSize: \"30px\" }}\n              />\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated <LastUpdated latest={latest.updated} /></small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n      <br />    \n      <div className=\"block-map border-10  mb-5\"\n       style={\n        { height: '100vh', width: '80%',  margin: \"auto\", border: \"5px solid black\", borderRadius:\"10px\" ,boxShadow:\"10px 10px 30px #cc6699\"}}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key:\"AIzaSyAzUvt-N4u0IEyEt1-JZeMaSmsVM498bKA\"}}\n          defaultCenter={{\n                            lat: 28,\n                            lng: 84\n                          }}\n          defaultZoom={4}\n        >\n         {countriesLocations}\n        </GoogleMapReact>\n      </div>    \n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction Footer() {\n  return (\n    <footer>\n            <div className=\"container\">\n                <div className=\"row justify-content-center mt-5\">             \n                    \n                    <div className=\"col-12 col-sm-4 align-self-center\">\n                        <div className=\"text-center\">\n                            <a className=\"btn btn-social-icon btn-instagram mr-2\" href=\"https://www.instagram.com/nisaaaaar/\"><i className=\"fa fa-instagram\"></i></a>\n                            <a className=\"btn btn-social-icon btn-linkedin mr-2\" href=\"https://www.linkedin.com/in/nisar-ahmad-a9ab30110/\"><i className=\"fa fa-linkedin\"></i></a>\n                            <a className=\"btn btn-social-icon btn-github mr-2\" href=\"https://github.com/nisaaaaar\"><i className=\"fa fa-github\"></i></a>\n                            <a className=\"btn btn-social-icon\" href=\"mailto:\"><i className=\"fa fa-envelope-o\"></i></a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row justify-content-center\">             \n                    <div className=\"col-auto mt-5\">\n                        <p style={{color:\"white\"}}> Copyright © NISAR AHMAD (2020) #StaySafe</p>\n                    </div>\n                </div>\n            </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Home from \"./pages/Home\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n  return (\n      <div>\n          <Home />\n        <Footer />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.css';\nimport 'bootstrap-social/bootstrap-social.css';import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}